{"version":3,"sources":["components/Uploader.tsx","pages/Home.tsx"],"names":["Dragger","Upload","EditableContext","createContext","EditableRow","index","props","Form","useForm","form","component","Provider","value","EditableCell","title","editable","children","dataIndex","record","handleSave","restProps","useState","editing","setEditing","inputRef","useRef","useContext","useEffect","current","focus","toggleEdit","setFieldsValue","save","a","validateFields","values","console","log","childNode","Item","style","margin","name","rules","required","ref","onPressEnter","onBlur","className","paddingRight","onClick","EditableTable","ImageStore","useStore","dataSource","key","width","height","filename","thumb","serverFile","attributes","image","url","count","state","setState","columns","render","Image","src","text","type","copy","message","success","row","newData","findIndex","item","splice","components","body","cell","columnTypes","map","col","onCell","rowClassName","bordered","pagination","Result","styled","div","img","DraggerWrapper","Uploader","observer","UserStore","showUploadList","beforeUpload","file","setFile","setFilename","currentUser","warning","then","test","size","error","upload","catch","tip","spinning","isUploading","InboxOutlined","H1","h1","Home"],"mappings":"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","file":"static/js/8.8210e26a.chunk.js","sourcesContent":["import React, {createContext, useContext, useEffect, useRef, useState} from 'react';\r\nimport {useStore} from '../store';\r\nimport {observer} from 'mobx-react';\r\nimport {Upload, message, Spin, Table, Input, Button, Form, FormInstance} from 'antd';\r\nimport {InboxOutlined} from '@ant-design/icons';\r\nimport styled from 'styled-components';\r\nimport copy from 'copy-to-clipboard';\r\n\r\nconst {Dragger} = Upload;\r\nconst EditableContext = createContext<FormInstance<any> | null>(null);\r\n\r\ninterface Item {\r\n    key: string;\r\n    name: string;\r\n    age: string;\r\n    address: string;\r\n}\r\n\r\ninterface EditableRowProps {\r\n    index: number;\r\n}\r\n\r\nconst EditableRow: React.FC<EditableRowProps> = ({index, ...props}) => {\r\n    const [form] = Form.useForm();\r\n    return (\r\n        <Form form={form} component={false}>\r\n            <EditableContext.Provider value={form}>\r\n                <tr {...props} />\r\n            </EditableContext.Provider>\r\n        </Form>\r\n    );\r\n};\r\n\r\ninterface EditableCellProps {\r\n    title: React.ReactNode;\r\n    editable: boolean;\r\n    children: React.ReactNode;\r\n    dataIndex: keyof Item;\r\n    record: Item;\r\n    handleSave: (record: Item) => void;\r\n}\r\n\r\nconst EditableCell: React.FC<EditableCellProps> = ({\r\n                                                       title,\r\n                                                       editable,\r\n                                                       children,\r\n                                                       dataIndex,\r\n                                                       record,\r\n                                                       handleSave,\r\n                                                       ...restProps\r\n                                                   }) => {\r\n    const [editing, setEditing] = useState(false);\r\n    const inputRef = useRef<Input>(null);\r\n    const form = useContext(EditableContext)!;\r\n\r\n    useEffect(() => {\r\n        if (editing) {\r\n            inputRef.current!.focus();\r\n        }\r\n    }, [editing]);\r\n\r\n    const toggleEdit = () => {\r\n        setEditing(!editing);\r\n        form.setFieldsValue({[dataIndex]: record[dataIndex]});\r\n    };\r\n\r\n    const save = async () => {\r\n        try {\r\n            const values = await form.validateFields();\r\n\r\n            toggleEdit();\r\n            handleSave({...record, ...values});\r\n        } catch (errInfo) {\r\n            console.log('Save failed:', errInfo);\r\n        }\r\n    };\r\n\r\n    let childNode = children;\r\n\r\n    if (editable) {\r\n        childNode = editing ? (\r\n            <Form.Item\r\n                style={{margin: 0}}\r\n                name={dataIndex}\r\n                rules={[\r\n                    {\r\n                        required: false,\r\n\r\n                    },\r\n                ]}\r\n            >\r\n                <Input ref={inputRef} onPressEnter={save} onBlur={save}/>\r\n            </Form.Item>\r\n        ) : (\r\n            <div className=\"editable-cell-value-wrap\" style={{paddingRight: 24}} onClick={toggleEdit}>\r\n                {children}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    return <td {...restProps}>{childNode}</td>;\r\n};\r\n\r\ntype EditableTableProps = Parameters<typeof Table>[0];\r\n\r\ninterface DataType {\r\n    key: React.Key;\r\n    name: string;\r\n    width: number;\r\n    height: number;\r\n    thumb: string;\r\n}\r\n\r\ninterface EditableTableState {\r\n    dataSource: DataType[];\r\n    count: number;\r\n}\r\n\r\ntype ColumnTypes = Exclude<EditableTableProps['columns'], undefined>;\r\n\r\nconst EditableTable: React.FC = () => {\r\n    const {ImageStore} = useStore();\r\n    const [state, setState] = useState<EditableTableState>({\r\n        dataSource: [\r\n            {\r\n                key: '0',\r\n                width: 0,\r\n                height: 0,\r\n                name: ImageStore.filename,\r\n                thumb: ImageStore.serverFile.attributes.image.attributes.url\r\n            },\r\n\r\n        ],\r\n        count: 1\r\n    });\r\n    const columns: (ColumnTypes[number] & { editable?: boolean; dataIndex: string })[] = [\r\n        {\r\n            title: '文件名',\r\n            dataIndex: 'name',\r\n            width: '15%',\r\n            render: (name) => <span>{name}</span>\r\n        },\r\n        {\r\n            title: '图片预览',\r\n            dataIndex: 'thumb',\r\n            render: (url) => <Image src={url}/>\r\n\r\n        },\r\n        {\r\n            title: '最大宽度（可选）',\r\n            dataIndex: 'width',\r\n            editable: true,\r\n            width: '25%',\r\n            render: text => text ? <div>{text}</div> : 0\r\n\r\n        },\r\n        {\r\n            title: '最大高度（可选）',\r\n            dataIndex: 'height',\r\n            editable: true,\r\n            width: '25%',\r\n            render: text => text ? <div>{text}</div> : 0\r\n\r\n        },\r\n        {\r\n            title: '操作',\r\n            dataIndex: 'operation',\r\n            render: () => <Button type={'primary'}\r\n                                  onClick={() => copy(`${state.dataSource[0].thumb}?imageView2/0/w/${state.dataSource[0].width}/h/${state.dataSource[0].height}`) && message.success('成功复制到剪贴板！')}\r\n            >复制链接</ Button>\r\n\r\n\r\n        }\r\n    ];\r\n\r\n    const handleSave = (row: DataType) => {\r\n        const newData = [...state.dataSource];\r\n        const index = newData.findIndex(item => row.key === item.key);\r\n        const item = newData[index];\r\n        newData.splice(index, 1, {...item, ...row});\r\n        setState({\r\n            ...state,\r\n            dataSource: newData,\r\n        });\r\n    };\r\n    const {dataSource} = state;\r\n    const components = {\r\n        body: {\r\n            row: EditableRow,\r\n            cell: EditableCell,\r\n        },\r\n    };\r\n    const columnTypes = columns.map(col => {\r\n        if (!col.editable) {\r\n            return col;\r\n        }\r\n        return {\r\n            ...col,\r\n            onCell: (record: DataType) => ({\r\n                record,\r\n                editable: col.editable,\r\n                dataIndex: col.dataIndex,\r\n                title: col.title,\r\n                handleSave,\r\n            }),\r\n        };\r\n    });\r\n    return (\r\n        <div>\r\n            <Table\r\n                components={components}\r\n                rowClassName={() => 'editable-row'}\r\n                bordered\r\n                dataSource={dataSource}\r\n                columns={columnTypes as ColumnTypes}\r\n                pagination={false}\r\n            />\r\n        </div>\r\n    );\r\n\r\n\r\n};\r\n\r\nconst Result = styled.div`\r\n  margin-top: 30px;\r\n  border: 1px dashed #ccc;\r\n  padding: 20px;\r\n`;\r\n\r\nconst Image = styled.img`\r\n  max-width: 100px;\r\n`;\r\n\r\nconst DraggerWrapper = styled.div`\r\n  max-width: 480px;\r\n  margin: 0 auto;\r\n`;\r\nconst Uploader = observer(() => {\r\n    const {ImageStore, UserStore} = useStore();\r\n    const props = {\r\n        showUploadList: false,\r\n        beforeUpload: (file: any) => {\r\n            ImageStore.setFile(file);\r\n            ImageStore.setFilename(file.name);\r\n            if (UserStore.currentUser === null) {\r\n                message.warning('请先登录再上传!').then();\r\n                return false;\r\n            }\r\n            if (!/(svg$)|(png$)|(jpg$)|(jpeg$)|(gif$)/ig.test(file.type)) {\r\n                message.error('只能上传 png/svg/jpg/gif 格式的图片').then();\r\n                return false;\r\n            }\r\n            if (file.size > 1024 * 1024) {\r\n                message.error('图片最大1M').then();\r\n                return false;\r\n            }\r\n            ImageStore.upload()\r\n                .then((serverFile) => {\r\n                    console.log('上传成功');\r\n                    console.log(serverFile);\r\n\r\n                }).catch(() => {\r\n                console.log('上传失败');\r\n            });\r\n            return false;\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <Spin tip=\"上传中\" spinning={ImageStore.isUploading}>\r\n                <DraggerWrapper>\r\n                    <Dragger {...props}>\r\n                        <p className=\"ant-upload-drag-icon\">\r\n                            <InboxOutlined/>\r\n                        </p>\r\n                        <p className=\"ant-upload-text\">点击或拖拽上传图片</p>\r\n                        <p className=\"ant-upload-hint\">\r\n                            仅支持 .png/.gif/.jpg/.svg 格式的图片，图片最大 1M\r\n                        </p>\r\n                    </Dragger>\r\n                </DraggerWrapper>\r\n                {\r\n                    ImageStore.serverFile ? <Result>\r\n                        <EditableTable/>\r\n                    </Result> : null\r\n                }\r\n            </Spin>\r\n        </div>\r\n    );\r\n});\r\nexport default Uploader;\r\n\r\n","import {observer} from \"mobx-react\";\r\n\r\nimport Uploader from \"../components/Uploader\";\r\nimport styled from 'styled-components';\r\n\r\nconst H1 = styled.h1`\r\n  color: white;\r\n  font-size: 3em;\r\n  font-weight: 500;\r\n  line-height: 120%;\r\n  text-align: center;\r\n  margin-bottom: 50px;\r\n`\r\nconst Home = observer(() => {\r\n    return (\r\n        <>\r\n            <H1>欢迎上传你的图片</H1>\r\n            <Uploader/>\r\n        </>\r\n    )\r\n})\r\nexport default Home;\r\n"],"sourceRoot":""}